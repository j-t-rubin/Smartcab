import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator
import numpy as np
import pandas as pd

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning = True, epsilon = 1, alpha = 0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions
        
        #self.ag_state = Agent.get_state(self)
        
        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        self.trial = 0
    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """
        trial = self.trial
        trial = trial + 1
        self.trial = trial
        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        if testing==True:
            self.epsilon = 0
            self.alpha = 0
        if testing==False:
            if self.learning == True:
                if trial > 1: 
                    if self.epsilon > 0:
                        #if optimizied == True:
                             #self.epsilon = np.exp(-0.002*trial)
                        #else:
                             self.epsilon = self.epsilon - 0.05
                    else:
                        self.epsilon = 0
            self.alpha = self.alpha
        return 

    def build_state(self):
        """ The build_state function is called when the agent requests data from0.( the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline
        
        inputs_t = tuple([inputs['light'],inputs['oncoming'],inputs['right'],inputs['left']]) 
        state = (waypoint,inputs_t)

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        # Calculate the maximum Q-value of all actions for a given state
        action_Q = self.Q[state] #{state,action:Q} dictionary-tuple -> {action:Q} dictionary
        maxQ = np.max(action_Q.values())
        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """
        if self.learning and state not in self.Q:
            self.Q[state] ={None:0.0,'left':0.0, 'right':0.0,'forward':0.0}  
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """
        self.next_waypoint = self.planner.next_waypoint()

        actions = [None, 'left','right', 'forward'] 
        # Set the agent state and default action
        self.state = state
        if not self.learning:
            action = np.random.choice(self.valid_actions)
        else:
            maxQ = self.get_maxQ(state)
            action_Q = self.Q[state]
            p = np.random.random_sample()
            if p > self.epsilon:
                i = 0
                actions_tie = np.array([])
                for k,v in action_Q.iteritems():
                    if v == self.get_maxQ(state):
                        i = i + 1
                        actions_tie = np.append(actions_tie, k) 
                        #list of tied Q values
                        return k
                if i > 1:
                    action = np.random.choice(actions_tie)
                    #choose random action among all optimal Q's
                else: 
                    action = k
                    return action 
            else:
                action = np.random.choice(actions)
                return action 
   
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """
        if self.learning:
            Qprev = self.Q[state][action]
            self.Q[self.state][action] = (1-self.alpha)*Qprev + self.alpha*reward
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose = False, grid_size = (6,8),num_dummies = 100)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = True, epsilon=1, alpha=0.5)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)

    ##############++
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env,update_delay = 0, log_metrics = True, display = False, optimized = False)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test = 10,tolerance = 0.05)


if __name__ == '__main__':
    run()
